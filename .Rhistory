byrow=T) #binded with non-varying parameters
dimnames(nonVarying)[[2]]=c("BETA",
"MU",
"DELTA",
"ALPHA",
"RHO",
"SIGMA",
"EPSILON",
"TAU",
"KAPPA",
"PSI",
"S",
"OMEGA",
"PHI",
"GAMMA",
"ETA",
"SUSJ.0","MDAJ.0", "SUSJM.0","EIJ.0","ERJ.0","INFJ.0", "RECJ.0", "SUSA.0", "EIA.0","ERA.0","INFA.0", "RECA.0","SPA.0","SPJ.0") # naming non-varying columns
## from other code
Kset=seq(from = 100, to=1000000, by =10000)
fullParamSets = cbind(nonVarying,Kset) # full parameter set
#fullParamSets[,1] <- fullParamSets[,1]*fullParamSets[,29]
head(fullParamSets)
dim(fullParamSets)
dimnames(fullParamSets)[[2]]=c("BETA","MU","DELTA","ALPHA","RHO",
"SIGMA","EPSILON","TAU",
"KAPPA","PSI","S","OMEGA","PHI","GAMMA","ETA",
"SUSJ.0","MDAJ.0", "SUSJM.0","EIJ.0","ERJ.0","INFJ.0", "RECJ.0", "SUSA.0", "EIA.0","ERA.0","INFA.0", "RECA.0","SPA.0","SPJ.0",
"K")
# order for pomp/C model:
BETA = fullParamSets[,1]
MU = fullParamSets[,2]
DELTA = fullParamSets[,3]
ALPHA = fullParamSets[,4]
RHO = fullParamSets[,5]
SIGMA = fullParamSets[,6]
K = fullParamSets[,30]
EPSILON = fullParamSets[,7]
TAU = fullParamSets[,8]
KAPPA = fullParamSets[,9]
PSI = fullParamSets[,10]
S = fullParamSets[,11]
OMEGA = fullParamSets[,12]
PHI = fullParamSets[,13]
GAMMA = fullParamSets[,14]
ETA = fullParamSets[,15]
SUSJ.0 = fullParamSets[,16]
MDAJ.0 = fullParamSets[,17]
SUSJM.0 = fullParamSets[,18]
EIJ.0 = fullParamSets[,19]
ERJ.0 = fullParamSets[,20]
INFJ.0 = fullParamSets[,21]
RECJ.0 = fullParamSets[,22]
SUSA.0 = fullParamSets[,23]
EIA.0 = fullParamSets[,24]
ERA.0 = fullParamSets[,25]
INFA.0 = fullParamSets[,26]
RECA.0 = fullParamSets[,27]
SPA.0 = fullParamSets[,28]
SPJ.0 = fullParamSets[,29]
paramset<-cbind(BETA,
MU,
DELTA,
ALPHA,
RHO,
SIGMA,
K,
EPSILON,
TAU,
KAPPA,
PSI,
S,
OMEGA,
PHI,
GAMMA,
ETA,
SUSJ.0,
MDAJ.0,
SUSJM.0,
EIJ.0,
ERJ.0,
INFJ.0,
RECJ.0,
SUSA.0,
EIA.0,
ERA.0,
INFA.0,
RECA.0,
SPA.0,
SPJ.0)
######################################################################################
## Calling requisite libraries for parallel computing
results<-array(NA,dim=c(40,1,5))
out1 <-simulate(sir,params=c(paramset[1,]),
seed=1493885L,nsim=100,states=T,obs=F,as.data.frame=T) #
outres1 <- out1[seq(from=9126,to=912600,by=9126),] # select last #s
N1 = array(0,c(100,5)) # same dimensions as No. runs * outputs I want
for (i in 1:100){ # each stochastic run
N1[i,1]<-sum(outres1[i,1:12])
N1[i,2]<-(sum(outres1[i,6],outres1[i,11])/sum(outres1[i,1:12]))*100 # prevalence; total
N1[i,3]<-((outres1[i,12])/(sum(outres1[i,8:12])))*100 # adult seroprevalence; total
N1[i,4]<-ifelse(sum(outres1[i,1:12])>0,1,0) # population extinct for each run
N1[i,5]<-ifelse(sum(outres1[i,6],outres1[i,11])>0,1,0) # pathogen extinction for each run
}
N1[is.na(N1)]<- 0
N1
N1[1,2]<-1
N1
ifelse(N1[,2]==0,N1[,2]<-"NA",N1[,2])
N1
outres1 <- out1[seq(from=9126,to=912600,by=9126),] # select last #s
N1 = array(0,c(100,5)) # same dimensions as No. runs * outputs I want
for (i in 1:100){ # each stochastic run
N1[i,1]<-sum(outres1[i,1:12])
N1[i,2]<-(sum(outres1[i,6],outres1[i,11])/sum(outres1[i,1:12]))*100 # prevalence; total
N1[i,3]<-((outres1[i,12])/(sum(outres1[i,8:12])))*100 # adult seroprevalence; total
N1[i,4]<-ifelse(sum(outres1[i,1:12])>0,1,0) # population extinct for each run
N1[i,5]<-ifelse(sum(outres1[i,6],outres1[i,11])>0,1,0) # pathogen extinction for each run
}
N1[is.na(N1)]<- 0
ifelse(N1[,2]==0,N1[,2]<-NA,N1[,2])
outres1 <- out1[seq(from=9126,to=912600,by=9126),] # select last #s
N1 = array(0,c(100,5)) # same dimensions as No. runs * outputs I want
for (i in 1:100){ # each stochastic run
N1[i,1]<-sum(outres1[i,1:12])
N1[i,2]<-(sum(outres1[i,6],outres1[i,11])/sum(outres1[i,1:12]))*100 # prevalence; total
N1[i,3]<-((outres1[i,12])/(sum(outres1[i,8:12])))*100 # adult seroprevalence; total
N1[i,4]<-ifelse(sum(outres1[i,1:12])>0,1,0) # population extinct for each run
N1[i,5]<-ifelse(sum(outres1[i,6],outres1[i,11])>0,1,0) # pathogen extinction for each run
}
N1[is.na(N1)]<- 0
N1
N1[1,2]<-1
N1
ifelse(N1[,2]==0,N1[,2]<-NA,N1[,2])
outres1 <- out1[seq(from=9126,to=912600,by=9126),] # select last #s
N1 = array(0,c(100,5)) # same dimensions as No. runs * outputs I want
for (i in 1:100){ # each stochastic run
N1[i,1]<-sum(outres1[i,1:12])
N1[i,2]<-(sum(outres1[i,6],outres1[i,11])/sum(outres1[i,1:12]))*100 # prevalence; total
N1[i,3]<-((outres1[i,12])/(sum(outres1[i,8:12])))*100 # adult seroprevalence; total
N1[i,4]<-ifelse(sum(outres1[i,1:12])>0,1,0) # population extinct for each run
N1[i,5]<-ifelse(sum(outres1[i,6],outres1[i,11])>0,1,0) # pathogen extinction for each run
}
N1[is.na(N1)]<- 0
N1[1,2]<-1
N1
ifelse(N1[,2]==0,N1[,2]<-NA,N1[,2]==N1[,2])
outres1 <- out1[seq(from=9126,to=912600,by=9126),] # select last #s
N1 = array(0,c(100,5)) # same dimensions as No. runs * outputs I want
for (i in 1:100){ # each stochastic run
N1[i,1]<-sum(outres1[i,1:12])
N1[i,2]<-(sum(outres1[i,6],outres1[i,11])/sum(outres1[i,1:12]))*100 # prevalence; total
N1[i,3]<-((outres1[i,12])/(sum(outres1[i,8:12])))*100 # adult seroprevalence; total
N1[i,4]<-ifelse(sum(outres1[i,1:12])>0,1,0) # population extinct for each run
N1[i,5]<-ifelse(sum(outres1[i,6],outres1[i,11])>0,1,0) # pathogen extinction for each run
}
N1[is.na(N1)]<- 0
N1[1,2]<-1
ifelse(N1[,2]==0,N1[,2]<-NA,N1[,2]<-N1[,2])
N1
outres1 <- out1[seq(from=9126,to=912600,by=9126),] # select last #s
N1 = array(0,c(100,5)) # same dimensions as No. runs * outputs I want
for (i in 1:100){ # each stochastic run
N1[i,1]<-sum(outres1[i,1:12])
N1[i,2]<-(sum(outres1[i,6],outres1[i,11])/sum(outres1[i,1:12]))*100 # prevalence; total
N1[i,3]<-((outres1[i,12])/(sum(outres1[i,8:12])))*100 # adult seroprevalence; total
N1[i,4]<-ifelse(sum(outres1[i,1:12])>0,1,0) # population extinct for each run
N1[i,5]<-ifelse(sum(outres1[i,6],outres1[i,11])>0,1,0) # pathogen extinction for each run
}
N1[is.na(N1)]<- 0
N1[1,2]<-1
df[,2][df[,2] == 0] <- NA
df[df[,2] == 0] <- NA
outres1 <- out1[seq(from=9126,to=912600,by=9126),] # select last #s
N1 = array(0,c(100,5)) # same dimensions as No. runs * outputs I want
for (i in 1:100){ # each stochastic run
N1[i,1]<-sum(outres1[i,1:12])
N1[i,2]<-(sum(outres1[i,6],outres1[i,11])/sum(outres1[i,1:12]))*100 # prevalence; total
N1[i,3]<-((outres1[i,12])/(sum(outres1[i,8:12])))*100 # adult seroprevalence; total
N1[i,4]<-ifelse(sum(outres1[i,1:12])>0,1,0) # population extinct for each run
N1[i,5]<-ifelse(sum(outres1[i,6],outres1[i,11])>0,1,0) # pathogen extinction for each run
}
N1[is.na(N1)]<- 0
N1[1,2]<-1
df[df[,2] == 0] <- NA
N1
N1[N1[,2] == 0] <- NA
N1
outres1 <- out1[seq(from=9126,to=912600,by=9126),] # select last #s
N1 = array(0,c(100,5)) # same dimensions as No. runs * outputs I want
for (i in 1:100){ # each stochastic run
N1[i,1]<-sum(outres1[i,1:12])
N1[i,2]<-(sum(outres1[i,6],outres1[i,11])/sum(outres1[i,1:12]))*100 # prevalence; total
N1[i,3]<-((outres1[i,12])/(sum(outres1[i,8:12])))*100 # adult seroprevalence; total
N1[i,4]<-ifelse(sum(outres1[i,1:12])>0,1,0) # population extinct for each run
N1[i,5]<-ifelse(sum(outres1[i,6],outres1[i,11])>0,1,0) # pathogen extinction for each run
}
N1[is.na(N1)]<- 0
N1[1,2]<-1
N1[,2][N1[,2] == 0] <- NA
N1
?mean
## now average
N1[,2][N1[,2] == 0] <- NA
M1 = array(0,c(1,5))
M1[1] = mean(N1[1:100,1]) # population size
M1[2] = mean(N1[1:100,2],na.rm=T) # prevalence
M1[3] = mean(N1[1:100,3]) # adult seroprevalence
M1[4] = mean(N1[1:100,4]) # adult seroprevalence
M1[5] = mean(N1[1:100,5]) # adult seroprevalence
rm(out1)
M1
results[1,,]<-M1
results[1,,]
results<-array(NA,dim=c(100,1,5))
for (j in 1:length(paramset[,1])){
out <-simulate(sir,params=c(paramset[j,]),
seed=1493885L,nsim=100,states=T,obs=F,as.data.frame=T) #
outres <- out[seq(from=9126,to=912600,by=9126),] # select last #s
N = array(0,c(100,5)) # same dimensions as No. runs * outputs I want
for (i in 1:100){ # each stochastic run
N[i,1]<-sum(outres[i,1:12])
N[i,2]<-(sum(outres[i,6],outres[i,11])/sum(outres[i,1:12]))*100 # prevalence; total
N[i,3]<-((outres[i,12])/(sum(outres[i,8:12])))*100 # adult seroprevalence; total
N[i,4]<-ifelse(sum(outres[i,1:12])>0,1,0) # population extinct for each run
N[i,5]<-ifelse(sum(outres[i,6],outres[i,11])>0,1,0) # pathogen extinction for each run
}
N[is.na(N)]<- 0
N1[,2][N1[,2] == 0] <- NA
## now average
M = array(0,c(1,5))
M[1] = mean(N[1:100,1]) # population size
M[2] = mean(N[1:100,2]) # prevalence
M[3] = mean(N[1:100,3]) # adult seroprevalence
M[4] = mean(N[1:100,4]) # mean pop extinction
M[5] = mean(N[1:100,5]) # mean path extinction
rm(out)
results[j,,]<-M
}
#
X<-aperm(results,c(1,2,3))
dim(X)<-c(100,5)
head(X)
tail(X)
par(mfrow=c(1,1))
par(mar=c(5, 6, 4, 4) + 0.1)
plot(X[,1],X[,2],pch=16,
ylab="Mean prevalence (%)",xlab="Population size",
col="grey25", cex.lab=1.2)
plot(X[,1],X[,3],pch=16,
ylab="Mean seroprevalence (%)",xlab="Population size",
col="grey25", cex.lab=1.2)
plot(X[,1],X[,5],pch=16,
ylab="P[persist]",xlab="Population size",
col="grey25", cex.lab=1.2)
M
mean
x<-c(1:10)
x
mean(x)
x[2]<-NA
mean(x)
mean(x,na.rm=T)
for (j in 1:length(paramset[,1])){
out <-simulate(sir,params=c(paramset[j,]),
seed=1493885L,nsim=100,states=T,obs=F,as.data.frame=T) #
outres <- out[seq(from=9126,to=912600,by=9126),] # select last #s
N = array(0,c(100,5)) # same dimensions as No. runs * outputs I want
for (i in 1:100){ # each stochastic run
N[i,1]<-sum(outres[i,1:12])
N[i,2]<-(sum(outres[i,6],outres[i,11])/sum(outres[i,1:12]))*100 # prevalence; total
N[i,3]<-((outres[i,12])/(sum(outres[i,8:12])))*100 # adult seroprevalence; total
N[i,4]<-ifelse(sum(outres[i,1:12])>0,1,0) # population extinct for each run
N[i,5]<-ifelse(sum(outres[i,6],outres[i,11])>0,1,0) # pathogen extinction for each run
}
N[is.na(N)]<- 0
N1[,2][N1[,2] == 0] <- NA
## now average
M = array(0,c(1,5))
M[1] = mean(N[1:100,1]) # population size
M[2] = mean(N[1:100,2],na.rm=T) # prevalence
M[3] = mean(N[1:100,3]) # adult seroprevalence
M[4] = mean(N[1:100,4]) # mean pop extinction
M[5] = mean(N[1:100,5]) # mean path extinction
rm(out)
results[j,,]<-M
}
#
#########################################################33
X<-aperm(results,c(1,2,3))
dim(X)<-c(100,5)
head(X)
tail(X)
par(mfrow=c(1,1))
par(mar=c(5, 6, 4, 4) + 0.1)
plot(X[,1],X[,2],pch=16,
ylab="Mean prevalence (%)",xlab="Population size",
col="grey25", cex.lab=1.2)
plot(X[,1],X[,3],pch=16,
ylab="Mean seroprevalence (%)",xlab="Population size",
col="grey25", cex.lab=1.2)
plot(X[,1],X[,5],pch=16,
ylab="P[persist]",xlab="Population size",
col="grey25", cex.lab=1.2)
plot(X[,1],X[,4],pch=16,
ylab="Pop[persist]",xlab="Population size",
col="grey25", cex.lab=1.2)
M
N
N[,2][N[,2] == 0] <- NA
mean(N[1:100,2],na.rm=T)
results
mean(N[1:100,2]
)
for (j in 1:length(paramset[,1])){
out <-simulate(sir,params=c(paramset[j,]),
seed=1493885L,nsim=100,states=T,obs=F,as.data.frame=T) #
outres <- out[seq(from=9126,to=912600,by=9126),] # select last #s
N = array(0,c(100,5)) # same dimensions as No. runs * outputs I want
for (i in 1:100){ # each stochastic run
N[i,1]<-sum(outres[i,1:12])
N[i,2]<-(sum(outres[i,6],outres[i,11])/sum(outres[i,1:12]))*100 # prevalence; total
N[i,3]<-((outres[i,12])/(sum(outres[i,8:12])))*100 # adult seroprevalence; total
N[i,4]<-ifelse(sum(outres[i,1:12])>0,1,0) # population extinct for each run
N[i,5]<-ifelse(sum(outres[i,6],outres[i,11])>0,1,0) # pathogen extinction for each run
}
N[is.na(N)]<- 0
N[,2][N[,2] == 0] <- NA
## now average
M = array(0,c(1,5))
M[1] = mean(N[1:100,1]) # population size
M[2] = mean(N[1:100,2],na.rm=T) # prevalence
M[3] = mean(N[1:100,3]) # adult seroprevalence
M[4] = mean(N[1:100,4]) # mean pop extinction
M[5] = mean(N[1:100,5]) # mean path extinction
rm(out)
results[j,,]<-M
}
#
#########
par(mfrow=c(1,1))
par(mar=c(5, 6, 4, 4) + 0.1)
X<-aperm(results,c(1,2,3))
dim(X)<-c(100,5)
head(X)
tail(X)
plot(X[,1],X[,2],pch=16,
ylab="Mean prevalence (%)",xlab="Population size",
col="grey25", cex.lab=1.2)
plot(X[,1],X[,3],pch=16,
ylab="Mean seroprevalence (%)",xlab="Population size",
col="grey25", cex.lab=1.2)
plot(X[,1],X[,5],pch=16,
ylab="P[persist]",xlab="Population size",
col="grey25", cex.lab=1.2)
results<-array(NA,dim=c(100,1,5))
for (j in 1:length(paramset[,1])){
out <-simulate(sir,params=c(paramset[j,]),
seed=1493885L,nsim=100,states=T,obs=F,as.data.frame=T) #
outres <- out[seq(from=9126,to=912600,by=9126),] # select last #s
N = array(0,c(100,5)) # same dimensions as No. runs * outputs I want
for (i in 1:100){ # each stochastic run
N[i,1]<-sum(outres[i,1:12])
N[i,2]<-(sum(outres[i,6],outres[i,11])/sum(outres[i,1:12]))*100 # prevalence; total
N[i,3]<-((outres[i,12])/(sum(outres[i,8:12])))*100 # adult seroprevalence; total
N[i,4]<-ifelse(sum(outres[i,1:12])>0,1,0) # population extinct for each run
N[i,5]<-ifelse(sum(outres[i,6],outres[i,11])>0,1,0) # pathogen extinction for each run
}
N[is.na(N)]<- 0
N[,2][N[,2] == 0] <- NA
N[,3][N[,3] == 0] <- NA
## now average
M = array(0,c(1,5))
M[1] = mean(N[1:100,1]) # population size
M[2] = mean(N[1:100,2],na.rm=T) # prevalence
M[3] = mean(N[1:100,3],na.rm=T) # adult seroprevalence
M[4] = mean(N[1:100,4]) # mean pop extinction
M[5] = mean(N[1:100,5]) # mean path extinction
rm(out)
results[j,,]<-M
}
#
############################################################3
## need matrix of results...
X<-aperm(results,c(1,2,3))
dim(X)<-c(100,5)
head(X)
tail(X)
par(mfrow=c(1,1))
par(mar=c(5, 6, 4, 4) + 0.1)
plot(X[,1],X[,2],pch=16,
ylab="Mean prevalence (%)",xlab="Population size",
col="grey25", cex.lab=1.2)
plot(X[,1],X[,3],pch=16,
ylab="Mean seroprevalence (%)",xlab="Population size",
col="grey25", cex.lab=1.2)
plot(X[,1],X[,5],pch=16,
ylab="P[persist]",xlab="Population size",
col="grey25", cex.lab=1.2)
X[,3]
X[,2]
X[,3]
plot(X[,1],X[,2],pch=16,
ylab="Mean prevalence (%)",xlab="Population size",
col="grey25", cex.lab=1.2)
plot(X[,1],X[,2],pch=16,
ylab="Mean prevalence (%)",xlab="Population size",
col="grey25", cex.lab=1.2,ylim=c(0,max(X[,2])))
max(X[,2])
col="grey25", cex.lab=1.2,ylim=c(0,max(X[,2],na.rm=T)))
plot(X[,1],X[,2],pch=16,
ylab="Mean prevalence (%)",xlab="Population size",
col="grey25", cex.lab=1.2,ylim=c(0,max(X[,2],na.rm=T)))
plot(X[,1],X[,2],pch=16,
ylab="Mean prevalence (%)",xlab="Population size",
col="grey25", cex.lab=1.2,ylim=c(0,max(X[,2],na.rm=T)+0.01))
par(mfrow=c(1,3))
plot(X[,1],X[,5],pch=16,
ylab="P[persist]",xlab="Population size",
col="grey25", cex.lab=1.2)
plot(X[,1],X[,3],pch=16,
ylab="Mean seroprevalence (%)",xlab="Population size",
col="grey25", cex.lab=1.2)
plot(X[,1],X[,2],pch=16,
ylab="Mean prevalence (%)",xlab="Population size",
col="grey25", cex.lab=1.2,ylim=c(0,max(X[,2],na.rm=T)+0.01))
par(mfrow=c(1,1))
par(mar=c(5, 6, 4, 4) + 0.1)
tiff("k_lbv_prev.tiff",width=8,height=8,units='in',res=300, compression = "lzw")
plot(X[,1],X[,2],pch=16,
ylab="Mean prevalence (%)",xlab="Population size",
col="grey25", cex.lab=1.2,ylim=c(0,max(X[,2],na.rm=T)+0.01))
dev.off()
tiff("k_lbv_serop.tiff",width=8,height=8,units='in',res=300, compression = "lzw")
plot(X[,1],X[,3],pch=16,
ylab="Mean seroprevalence (%)",xlab="Population size",
col="grey25", cex.lab=1.2)
dev.off()
tiff("k_lbv_pers.tiff",width=8,height=8,units='in',res=300, compression = "lzw")
plot(X[,1],X[,5],pch=16,
ylab="P[persist]",xlab="Population size",
col="grey25", cex.lab=1.2)
dev.off()
par(mfrow=c(1,3))
tiff("k_plots.tiff",width=8,height=8,units='in',res=300, compression = "lzw")
plot(X[,1],X[,2],pch=16,
ylab="Mean prevalence (%)",xlab="Population size",
col="grey25", cex.lab=1.2,ylim=c(0,max(X[,2],na.rm=T)+0.01))
plot(X[,1],X[,3],pch=16,
ylab="Mean seroprevalence (%)",xlab="Population size",
col="grey25", cex.lab=1.2)
plot(X[,1],X[,5],pch=16,
ylab="P[persist]",xlab="Population size",
col="grey25", cex.lab=1.2)
dev.off()
##
tiff("k_plots.tiff",width=8,height=8,units='in',res=300, compression = "lzw")
par(mfrow=c(1,3))
plot(X[,1],X[,2],pch=16,
ylab="Mean prevalence (%)",xlab="Population size",
col="grey25", cex.lab=1.2,ylim=c(0,max(X[,2],na.rm=T)+0.01))
plot(X[,1],X[,3],pch=16,
ylab="Mean seroprevalence (%)",xlab="Population size",
col="grey25", cex.lab=1.2)
plot(X[,1],X[,5],pch=16,
ylab="P[persist]",xlab="Population size",
col="grey25", cex.lab=1.2)
dev.off()
##
tiff("k_plots.tiff",width=12,height=6,units='in',res=300, compression = "lzw")
par(mfrow=c(1,3))
plot(X[,1],X[,2],pch=16,
ylab="Mean prevalence (%)",xlab="Population size",
col="grey25", cex.lab=1.2,ylim=c(0,max(X[,2],na.rm=T)+0.01))
plot(X[,1],X[,3],pch=16,
ylab="Mean seroprevalence (%)",xlab="Population size",
col="grey25", cex.lab=1.2)
plot(X[,1],X[,5],pch=16,
ylab="P[persist]",xlab="Population size",
col="grey25", cex.lab=1.2)
dev.off()
tiff("k_plots.tiff",width=12,height=5,units='in',res=300, compression = "lzw")
par(mfrow=c(1,3))
plot(X[,1],X[,2],pch=16,
ylab="Mean prevalence (%)",xlab="Population size",
col="grey25", cex.lab=1.2,ylim=c(0,max(X[,2],na.rm=T)+0.01))
plot(X[,1],X[,3],pch=16,
ylab="Mean seroprevalence (%)",xlab="Population size",
col="grey25", cex.lab=1.2)
plot(X[,1],X[,5],pch=16,
ylab="P[persist]",xlab="Population size",
col="grey25", cex.lab=1.2)
dev.off()
par(mfrow=c(1,1))
plot(X[,1],X[,2],pch=16,
ylab="Mean prevalence & seroprevalence (%)",xlab="Population size",
col="grey25", cex.lab=1.2,ylim=c(0,max(X[,2],na.rm=T)+0.01))
points(X[,1],X[,3],pch=16,
col="red", cex.lab=1.2)
plot(X[,1],X[,3],pch=16,
ylab="Mean prevalence & seroprevalence (%)",xlab="Population size",
col="grey25", cex.lab=1.2)
points(X[,1],X[,2],pch=16,
col="red", cex.lab=1.2)
tiff("k_P_SP_plots.tiff",width=8,height=8,units='in',res=300, compression = "lzw")
par(mfrow=c(1,1))
plot(X[,1],X[,3],pch=16,
ylab="Mean prevalence & seroprevalence (%)",xlab="Population size",
col="grey25", cex.lab=1.2)
points(X[,1],X[,2],pch=16,
col="red", cex.lab=1.2)
dev.off()
